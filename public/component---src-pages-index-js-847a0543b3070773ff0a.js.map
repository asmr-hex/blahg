{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./src/components/seo.js","webpack:///./src/components/image.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js"],"names":["query","IndexPage","_ref","data","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_components_layout__WEBPACK_IMPORTED_MODULE_5__","style","padding","width","display","alignItems","map","allMarkdownRemark","edges","edge","position","gatsby_image__WEBPACK_IMPORTED_MODULE_3___default","fixed","node","frontmatter","cover_image","childImageSharp","top","left","transform","fontWeight","fontSize","color","short_title","__webpack_require__","d","__webpack_exports__","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","StaticQueryContext","React","createContext","props","Consumer","staticQueryData","render","children","propTypes","PropTypes","object","string","isRequired","func","m","module","exports","require","default","SEO","description","lang","meta","keywords","title","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","siteMetadata","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","defaultProps","arrayOf","Image","gatsby__WEBPACK_IMPORTED_MODULE_2__","fluid","placeholderImage","_public_static_d_2977595066_json__WEBPACK_IMPORTED_MODULE_0__","ProdPageRenderer","location","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","Object","assign","json","shape","Header","siteTitle","siteDescription","react_default","minWidth","maxWidth","borderRight","flexDirection","margin","components_image","gatsby_browser_entry","to","textDecoration","border","marginTop","href","Layout","className","seo","header","_2328579951"],"mappings":"6MAkDaA,UAAK,cAuBHC,UAjEG,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAH,OAChBC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,OACEE,MAAO,CACLC,QAAO,YACPC,MAAK,OACLC,QAAO,OACPC,WAAU,eAIVC,cACEV,EAAKW,kBAAkBC,MACvB,SAAAC,GAAI,OACFZ,EAAAC,EAAAC,cAAA,OACEE,MAAO,CACLC,QAAO,gBACPQ,SAAQ,aAGVb,EAAAC,EAAAC,cAACY,EAAAb,EAAD,CAAKc,MAAOH,EAAKI,KAAKC,YAAYC,YAAYC,gBAAgBJ,QAC9Df,EAAAC,EAAAC,cAAA,OACEE,MAAO,CACLS,SAAQ,WACRO,IAAG,MACHC,KAAI,MACJC,UAAS,wBACTC,WAAU,MACVC,SAAQ,MACRC,MAAK,UAGNb,EAAKI,KAAKC,YAAYS,qDCxCvCC,EAAAC,EAAAC,EAAA,sBAAAC,IAAA,IAAAC,EAAAJ,EAAA,GAAAK,EAAAL,EAAAM,EAAAF,GAAAG,EAAAP,EAAA,GAAAQ,EAAAR,EAAAM,EAAAC,GAAAE,EAAAT,EAAA,IAAAU,EAAAV,EAAAM,EAAAG,GAAAT,EAAAC,EAAAC,EAAA,sBAAAQ,EAAApC,IAAA0B,EAAA,SAaMW,EAAqBC,IAAMC,cAAc,IAEzCV,EAAc,SAAAW,GAAK,OACvBT,EAAA/B,EAAAC,cAACoC,EAAmBI,SAApB,KACG,SAAAC,GACC,OACEF,EAAM1C,MACL4C,EAAgBF,EAAM7C,QAAU+C,EAAgBF,EAAM7C,OAAOG,MAEtD0C,EAAMG,QAAUH,EAAMI,UAC5BJ,EAAM1C,KAAO0C,EAAM1C,KAAKA,KAAO4C,EAAgBF,EAAM7C,OAAOG,MAGvDiC,EAAA/B,EAAAC,cAAA,uCA4Bf4B,EAAYgB,UAAY,CACtB/C,KAAMgD,IAAUC,OAChBpD,MAAOmD,IAAUE,OAAOC,WACxBN,OAAQG,IAAUI,KAClBN,SAAUE,IAAUI,2BC1DtB,IAAsBC,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,OALRH,EAAEI,SAAYJ,mGCY/C,SAASK,EAAT3D,GAA2D,IAA5C4D,EAA4C5D,EAA5C4D,YAAaC,EAA+B7D,EAA/B6D,KAAMC,EAAyB9D,EAAzB8D,KAAMC,EAAmB/D,EAAnB+D,SAAUC,EAAShE,EAATgE,MACxCC,EADiDC,EAAAjE,KACjDgE,KAcFE,EAAkBP,GAAeK,EAAKG,aAAaR,YAEzD,OACE1D,EAAAC,EAAAC,cAACiE,EAAAlE,EAAD,CACEmE,eAAgB,CACdT,QAEFG,MAAOA,EACPO,cAAa,QAAUN,EAAKG,aAAaJ,MACzCF,KAAM,CACJ,CACEU,KAAI,cACJC,QAASN,GAEX,CACEO,SAAQ,WACRD,QAAST,GAEX,CACEU,SAAQ,iBACRD,QAASN,GAEX,CACEO,SAAQ,UACRD,QAAO,WAET,CACED,KAAI,eACJC,QAAO,WAET,CACED,KAAI,kBACJC,QAASR,EAAKG,aAAaO,QAE7B,CACEH,KAAI,gBACJC,QAAST,GAEX,CACEQ,KAAI,sBACJC,QAASN,IAGVS,OACCb,EAASc,OAAS,EACd,CACEL,KAAI,WACJC,QAASV,EAASe,KAAT,OAEX,IAELF,OAAOd,KAKhBH,EAAIoB,aAAe,CACjBlB,KAAI,KACJC,KAAM,GACNC,SAAU,GACVH,YAAW,IAGbD,EAAIX,UAAY,CACdY,YAAaX,IAAUE,OACvBU,KAAMZ,IAAUE,OAChBW,KAAMb,IAAU+B,QAAQ/B,IAAUC,QAClCa,SAAUd,IAAU+B,QAAQ/B,IAAUE,QACtCa,MAAOf,IAAUE,OAAOC,YAGXO,gGCnEAsB,IAhBD,SAAAjF,GAAA,IAAEM,EAAFN,EAAEM,MAAF,OACZJ,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,CACEpF,MAAK,aAWLgD,OAAQ,SAAA7C,GAAI,OAAIC,EAAAC,EAAAC,cAACY,EAAAb,EAAD,CAAKG,MAAOA,EAAO6E,MAAOlF,EAAKmF,iBAAiB/D,gBAAgB8D,SAZlFlF,KAAAoF,yNCVIC,EAAmB,SAAAtF,GAAkB,IAAfuF,EAAevF,EAAfuF,SACpBC,EAAgBC,UAAOC,4BAA4BH,EAASI,UAClE,OAAKH,EAIE/C,IAAMrC,cAAcwF,IAApBC,OAAAC,OAAA,CACLP,WACAC,iBACGA,EAAcO,OANV,MAUXT,EAAiBtC,UAAY,CAC3BuC,SAAUtC,IAAU+C,MAAM,CACxBL,SAAU1C,IAAUE,OAAOC,aAC1BA,YAGUkC,mlFCpBTW,EAAS,SAAAjG,GAAA,IAAGkG,EAAHlG,EAAGkG,UAAWC,EAAdnG,EAAcmG,gBAAd,OACbC,EAAAjG,EAAAC,cAAA,OACEE,MAAO,CACL+F,SAAQ,MACRC,SAAQ,MACRC,YAAW,sCACX9F,QAAO,OACP+F,cAAa,SACb9F,WAAU,WAGZ0F,EAAAjG,EAAAC,cAAA,OACEE,MAAO,CACLmG,OAAM,SACNlG,QAAO,oBACPE,QAAO,OACP+F,cAAa,SACb9F,WAAU,WAGZ0F,EAAAjG,EAAAC,cAACsG,EAAA,EAAD,CAAOpG,MAAO,CAACE,MAAO,OACtB4F,EAAAjG,EAAAC,cAAA,MAAIE,MAAO,CAAEmG,OAAQ,IACnBL,EAAAjG,EAAAC,cAACuG,EAAA,EAAD,CACEC,GAAG,IACHtG,MAAO,CACLqB,MAAK,2BACLkF,eAAc,SAGfX,KAIPE,EAAAjG,EAAAC,cAAA,OACEE,MAAO,CACLmG,OAAM,cACNK,OAAM,oBAHV,gBAMgBX,GAEhBC,EAAAjG,EAAAC,cAAA,OACEE,MAAO,CACLmG,OAAM,cACNK,OAAM,oBAHV,kBASCV,EAAAjG,EAAAC,cAAA,UAAQE,MAAO,CAACyG,UAAS,SACxBX,EAAAjG,EAAAC,cAAA,KAAGE,MAAO,CAACuG,eAAc,OAAUnF,SAAQ,SACxCsF,KAAK,yBADR,sBAONf,EAAOjD,UAAY,CACjBkD,UAAWjD,IAAUE,OACrBgD,gBAAiBlD,IAAUE,QAG7B8C,EAAOlB,aAAe,CACpBmB,UAAS,GACTC,gBAAe,OAIFF,iBC3DTgB,UAAS,SAAAjH,GAAA,IAAG+C,EAAH/C,EAAG+C,SAAH,OACbqD,EAAAjG,EAAAC,cAACuG,EAAA,EAAD,CACE7G,MAAK,aAULgD,OAAQ,SAAA7C,GAAI,OACVmG,EAAAjG,EAAAC,cAAA,OAAK8G,UAAU,WACbd,EAAAjG,EAAAC,cAAC+G,EAAA,EAAD,CAAKnD,MAAM,MAAMD,SAAU,qCAC3BqC,EAAAjG,EAAAC,cAACgH,EAAD,CAAQlB,UAAWjG,EAAKgE,KAAKG,aAAaJ,MAAOmC,gBAAiBlG,EAAKgE,KAAKG,aAAaR,cACxFb,IAfP9C,KAAAoH,MAqBFJ,EAAOjE,UAAY,CACjBD,SAAUE,IAAU/B,KAAKkC,YAGZ6D","file":"component---src-pages-index-js-847a0543b3070773ff0a.js","sourcesContent":["import React from \"react\"\nimport { graphql, Link } from \"gatsby\"\nimport Img from 'gatsby-image'\nimport {map} from 'lodash'\n\nimport Layout from \"../components/layout\"\nimport Image from \"../components/image\"\n\nconst IndexPage = ({ data }) => (\n  <Layout>\n    <div\n      style={{\n        padding: `1rem 1rem`,\n        width: `100%`,\n        display: `flex`,\n        alignItems: `flex-start`,\n      }}\n    >\n      {\n        map(\n          data.allMarkdownRemark.edges,\n          edge => (\n            <div\n              style={{\n                padding: `0.5rem 0.5rem`,\n                position: `relative`,\n              }}\n            >\n              <Img fixed={edge.node.frontmatter.cover_image.childImageSharp.fixed}/>\n              <div\n                style={{\n                  position: `absolute`,\n                  top: `50%`,\n                  left: `50%`,\n                  transform: `translate(-50%, -50%)`,\n                  fontWeight: `700`,\n                  fontSize: `2em`,\n                  color: `white`,\n                }}\n              >\n                {edge.node.frontmatter.short_title}\n              </div>\n            </div>\n          )\n        )\n      }\n    </div>\n  </Layout>  \n)\n\nexport const query = graphql`\n  query PostThumbnailQuery {\n    allMarkdownRemark {\n      edges {\n        node {\n          frontmatter {\n            title\n            short_title\n            cover_image {\n              publicURL\n              childImageSharp {\n                fixed(width: 200, height: 200) {\n                  ...GatsbyImageSharpFixed\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default IndexPage\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: `keywords`,\n                content: keywords.join(`, `),\n              }\n            : []\n        )\n        .concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import React from \"react\"\nimport { StaticQuery, graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\n/*\n * This component is built using `gatsby-image` to automatically serve optimized\n * images with lazy loading and reduced file sizes. The image is loaded using a\n * `StaticQuery`, which allows us to load the image from directly within this\n * component, rather than having to pass the image data down from pages.\n *\n * For more information, see the docs:\n * - `gatsby-image`: https://gatsby.dev/gatsby-image\n * - `StaticQuery`: https://gatsby.dev/staticquery\n */\n\nconst Image = ({style}) => (\n  <StaticQuery\n    query={graphql`\n      query {\n        placeholderImage: file(relativePath: { eq: \"boom.png\" }) {\n          childImageSharp {\n            fluid(maxWidth: 1000) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    `}\n    render={data => <Img style={style} fluid={data.placeholderImage.childImageSharp.fluid} />}\n  />\n)\nexport default Image\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  if (!pageResources) {\n    return null\n  }\n\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\nimport Image from \"./image\"\n\nconst Header = ({ siteTitle, siteDescription }) => (\n  <div\n    style={{\n      minWidth: `20%`,\n      maxWidth: `25%`,\n      borderRight: `2px dotted hsla(0.9, 50%, 50%, 0.3)`,\n      display: `flex`,\n      flexDirection: `column`,\n      alignItems: `center`,\n    }}\n  >\n    <div\n      style={{\n        margin: `0 auto`,\n        padding: `1.45rem 1.0875rem`,\n        display: `flex`,\n        flexDirection: `column`,\n        alignItems: `center`\n      }}\n    >\n      <Image style={{width: 170}}/>\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: `hsla(305, 100%, 80%, .5)`,\n            textDecoration: `none`,\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n    <div\n      style={{\n        margin: `1.5rem 2rem`,\n        border: `1px solid black`,\n      }}\n    >\n      description: {siteDescription}\n    </div>\n    <div\n      style={{\n        margin: `1.5rem 2rem`,\n        border: `1px solid black`,\n      }}\n    >\n      special topics\n    </div>\n\n     <footer style={{marginTop: `auto`}}>\n      <a style={{textDecoration: `none`, fontSize: `0.8em`}}\n         href=\"https://polygon.pizza\">polygon ♥ pizza\n      </a>\n    </footer>\n  </div>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n  siteDescription: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n  siteDescription: `...`,\n}\n\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's StaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { StaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport SEO from \"./seo\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n            description\n          }\n        }\n      }\n    `}\n    render={data => (\n      <div className=\"content\">\n        <SEO title=\"p_p\" keywords={[`music`, `programming`, `nonsense`]} />\n        <Header siteTitle={data.site.siteMetadata.title} siteDescription={data.site.siteMetadata.description}/>\n        {children}\n      </div>\n    )}\n  />\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n"],"sourceRoot":""}